Section 16: Intro to React

146. Swag Shop: Setting Up React Tooling

    1. install and create react app

        npm install -g create-react-app

        create-react-app swag-shop-web

        cd swag-shop-web
        
        npm start
---------------------------------------------

    • export default App, this allows us to use "App" like an HTML tag
        which contains all the info from the App class

            Javascript                          ES6

    var React = require("react");  ===> import React from "react";

    • Babel, makes ES6 -> Javascript

147. Swag Shop: Installing Bootstrap

    2. setup bootstrap
        • download css and js bootstrap files
        • must have JQuery and library called tether for bootstrap to work here
        JQuery: Download the compressed, production jQuery 3.4.1
            • right click link and select save as.. then insert that file into the public/js/ folder
        Tether: download(from github assets under releases) and put tether.min.js file in public/js/ folder

    • add to public/index.html : 

<link rel="stylesheet" href="%PUBLIC_URL%/css/bootstrap.min.css" />
<script src="%PUBLIC_URL%/js/jquery-3.4.1.min.js"></script>
<script src="%PUBLIC_URL%/js/tether.min.js"></script>
<script src="%PUBLIC_URL%/js/bootstrap.min.js"></script>

    • download react developer tools in chrome

    • to test if bootstrap is working - in app.js include className="container"


148. Swag Shop: Setting Up the API
    • I used the api from the previous section, or download it from Resources
    • added a bit more to the API to match the Resources one
    • start up database, server, run db shell, run react-app(npm start in root)

149. Swag Shop: Creating a HTTP Service
    • created an App folder to isolate individual components
    • created services folder, which are functions that the user wont see 
    • install whatwg-fetch (library that makes web requests for us)
        npm install --save whatwg-fetch

--- create http-service.js --------------------------------------------
import "whatwg-fetch"; //we don't have to store in a variable

class HttpService {
  //this is equivalent to var getProducts = function(){}
  getProducts = () => {
    fetch("http//localhost:3004/product").then(res => {})
  };
}

--- add to App.js ----------------------------------
//outside class as a global variable
const http = new HttpService();

//inside class
  constructor(props) {
    super(props);
    http.getProducts();
  }

150. Swag Shop: Promises with ES6 & React
    • Promises - promise to return something "in the future" with asynchronous functions
    • bind functions to components
    • 

151. Swag Shop: Components in React - Website Product
    • the more you break things down, the more reusable it is (components)
    • Component:
        • Create a new class that extends Component
        • give it a render method that has html in it(Bootstrap)
         • think small with the component, just have it render the component
    • Export default Compnent;

    • to use the component, include it somewhere as a tag <Component />
    • 

152. Swag Shop: Props in React
    • Properties = props, come from above (parent componenets)
    • prop ex (in App component): 

<Product price="4.23" title="Cool Toy Gun" imgUrl="......"/>

    • you are passing in as attributes like in html elements
    • Using props, in Product component:

this.props.<propName>

    • work flow: create componenet, pass down needed props with fake data, to quickly get the UI in place

    • instead of using card class for product, create own css product class and set sizes
    • for top padding , it should be handled by the parent 

    • you can put multiple 

    



