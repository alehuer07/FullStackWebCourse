Section 3: Introduction to CSS

12. What is CSS?
  -
13. How to use Inline, Internal and External CSS
  - Inline: 
      - inside the tags you put in a style tag
      - not very effective, not reusing code
  - Internal:
    - inside the header tag you put in a style tag and inside
      you identify the element you want to style folowed by brackets with styling inside
    - is better than inline, but can make the file get messy/large aswell
  - External
    - inside the head you put a link element like so: <link rel="stylesheet" href="style.css">
      - the href is the path to the CSS file
    - you identify the element you want to style folowed by brackets with styling inside
    - better ways of using CSS

14. CSS: Element, ID & Class Selectors
  3 Methods To Style Elements
    - directly target element
      body {}
      - every single element like an h1, will style every single h1 element
    - grab it by the class
      .square{}
        - these are great when you want to use the same styling across the web app

    - add an id to it
      * ID should be used sparingly, and the id should be very specific and unique 
      * shouldnt use ID all over the place, and should avoid using ID to style things
      - use the id sparingly, bc id's are mainly used for 
  
15. CSS: Colors
  - gradient is supported differently on certain browsers
  - the "parameters" following the shadow styling are "x and y coordinates"

16. CSS: Backrounds & Borders
  - can set a background image in body
  - can add and style an image using a class
    - can add a border and changed width, as well as configure the repeat

17. Using browswer inspector tools
  - broswers give information of html layout and css styling
  - you can select mobile/responsive layout to see what the page is like on mobile
  
18. CSS: Combinators
  - descendant and child Selectors
  - ul > li means only one level deep or only targets the immediate children
  - leaving the > symbol out means that the ul and every descendant of it that is a li will be targeted

19. CSS Grouping
  - used to help reduce code redundency
  - if elements have same exact styling then you can group them.
  - seperate by commas
  - can group any types of selectors before the styling statements

  