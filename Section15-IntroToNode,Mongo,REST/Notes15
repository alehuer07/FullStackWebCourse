Section 15: Intro to Node, Mongo, & REST API's 

129. Understanding Web Requests
  - HTTP : Hyper Text Transfer Protocol
    - data sent through text, through the internet, from client to server
  - Clients send a " GET request" when typing "devslopes.com"
  - the server recieves the request, and accept or denies the request
  - when accpeted, it sends a response
    - response: Header, body(in JSON format or XML)
  - POST request (when posting something new)
    - "We" create a json body and send to the server, which sends to the db
    - db sends success to server, server sends success to client
  - PUT request (modify existing data)

130. Installing Node on MacOS
  - *Node is a way to run javascript code*
  - Node & Express are powerful tools
  - Nodes.js package ecosystem, npm, is largest ecosystem of open source libraries

131. All About JSON
  - Javascript Object Notation
  - JSON and XML are ways to format data to send through the internet
  - JSON has keys and values (values can be different types)
  - JSON can have a key with an array as a values
  - curly brace ({}) means Object
  - by default, the browser doesn't know how to deal with json
    - Get JSON View to view the formatted json text

132. Basics of Node 
  - use npm to download addons for JS
  - the addon downloaded for this section was readline-sync
  - it just seemed to allow user input?

133. Node Modules
  - Dont need to put .js when exporting/require..
  - module.export can export anything
    - we exported a function
    - so when someone imports using the require function, they will get a function
  
134. Building your First API
  - node init to begin a "node project"
  - how do we install packages to be used?
  - use Express
    - used to create web Requests/ knows how to deal with incoming web Requests
    - allows us to work with REST
  - npm install --save <package goes here> (want to save a package.json)
  - if you want a package to always be in your code, always do --save
    - even if you delete it, it will still be there.
  - Need to always send something back in a Request
    - it could hang up a client/server
  - response.send() automatically creates a JSON and sends "it back"
  
  - run the server.js in terminal using "node server.js" command
    - then in a browser go to localhost:3000
    - you will see the text from the app.get function
    - if you define /funions, add /funions to localhost:300 and you will
    see what was defined in the app.get function

135. Postman, GET & POST Requests
  - focus on the client wanting to post new things to the server
  - to manage data parsing get body parser (npm install --save body-parser)
  - app.use(bodyParser...) is a layer of code that will properly format
  - urlencoded is saying when stuff comes in we want to work with arrays and strings,
  but reject things that aren't properly formatted
  
  - run server to see info in json format

  Handling a POST Request:
    - app.post(...)
    - and you can include error handing if else statements
    - use Postman to send a post request
      - type in raw JSON text (set file to JSON) and send the POST request
    - when you refresh the new info shows up
  
  - When the server goes down, so does the info that was added through POST Requests
    - this happens in our case because the info is stored on the server
    - when the server goes down the info(array) resets to how it is defined in the code
  - Usually the data wont be defined in the server, but in a DATABASE, because it is more persistent
  
136. URL Parameters & Delete Requests
  - app.put is an update
  Nodemon: will automatically update the server (restart it) when there is a change in the server.js

    - must start server with Nodemon (nodemon server.js) or (npx nodemon server.js)
    
137. Installing MongoDB on --MacOS--
  - Installing as a windows service means it will start up automatically by default
    - it is not recommended if using sparingly..
  - run the mongod.exe to start the DATABASE
  for me: /c/Program\ Files/MongoDB/Server/4.2/bin/mongod.exe


138. Working With the Mongo Shell
  - Mongo is a noSQL DATABASE
  - You insert "documents" into a collection
    - docments are in JSON type format
  - run mongo.exe to run the mongoDB Shell
  for me: /c/Program\ Files/MongoDB/Server/4.2/bin/mongo.exe

  Mongo Shell, Create a new DB:
    - use <name of database>
  -With mongoDB things are created as you use them (not like SQL)
    - To display contents: db.<collection>.find().pretty()
    - To insert a new element: db.<collection>.insert(<JSON>)
  Will be working with Mongoose - an app to interact with DB

139. Searching for Documents
  - Finding a specific document
    - search by ID: find({'_id':ObjectId("a234325gfa324")})
    - search by productName: find({'productName':'Blue Car;})
  - Updating a specific document
    - db.<collection>.update(<JSON to find the document>, {$set: <JSON of update>})
  Dont work inside your database through the shell in a real project
    - it is not reliable!
140. Deletions & Documentation
  - To remove: db.<collection>.remove(<JSON>)
    - will remove everything that has the mathcing JSON
  MongoDB documentation to learn all commands!

141. Swag Shop API: Project Creation (can create a base skeleton on github)
  1. Create folder swag-shop-api
    a. create file server.js
    b. get node up and running and get packages
      i. npm init
        - press enter on everything
      ii. npm install --save body-parser \
      iii. npm install --save express     > npm install --save body-parser express mongoose
      iv. npm install --save mongoose    /
----c. set up server.js ----------------------------------
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var db = mongoose.connect('mongodb://localhost/swag-shop');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: false}));

app.listen(3000, function(){
  console.log("Swag Shop API running on port 3000...");
});
-----------------------------------------------------------
    d. run mongod.exe  (run db server)
    e. nodemon server.js (run server)
    f. run mongo.exe (access mongo shell)

142. Swag Shop API: Creating the Models 
  - mongoose helps us structure mongodb (framework)
  - first create the lowest level data(product) for the site
  2. create file product.js and wishlist.js inside folder model 
--- a. set up product.js ----------------------------------
var mongoose = require('mongoose');
var Schema = mongoose.Schema; //blueprints

var product = new Schema({
  title: String,
  price: Number,
  likes: {type: Number, default:0} //changed to have a default value of 0
});

//this is node, it allows you to export from a file for another file to imports
//exporting a keyword (model) where you pass in (<name of the model>, <the Schema>)
//schema adds rules to adding documents to the DB
module.exports = mongoose.model('Product', product);
--- b. set up wishlist.js -----------------------------------
var mongoose = require("mongoose");
var Schema = mongoose.Schema; //blueprints
var ObjectId = mongoose.Schema.Types.ObjectId;

var wishList = new Schema({
  title: {type: String, default: "Cool Wish List"}, //multiple options in {}
  products:[{type:ObjectId, ref:'Product'}]         //ref:<type of Schema> Schema must be spelled the SAME!
});
module.exports = mongoose.model("WishList", wishList);

--- c. import the Schema to the server.js file --------------------------------------
      i. var Product = require('./model/product');
         var WishList = require('./model/wishlist');

143. Swag Shop API: Posting Products
  3. create API endpoints in server.js
--- a. set up a post request -------------------------------------------------------
app.post('/product', function(req, res){
  var product = new Product(); //mongoose model has constructor syntax
  product.title = req.body.title;
  product.price = req.body.price;
  product.save(function(err, savedProduct){
    if(err) {
      res.status(500).send({error:"Could not save product"});
    }
    else {
      res.status(200).send(savedProduct);
    }
  });
});

--- b. in postman, send a post request(with proper url) and in the body write: --------------------
{
	"title": "Vault Boy Bobble Head",
	"price": 23.99
}
--- c. check through mongo shell, that you have created a new DB (swag-shop), with a collection called "products" ----

144. Swag Shop API: Fetching Products 
--- d. set up a get request -----------------------------------------------------------------------
app.get('/product', function(req,res){
  Product.find({}, function(err, products){
    if(err) {
      res.status(500).send({error: "Could not fetch products"})
    }
    else{
      res.send(products);
    }
  });
});

--- e. add more items in postman (THESE ITEMS ARE PERSISTENT in the Database! Woah!) ---------------
--- f. submit a get request with proper url ---------------------------------------------------






